(function() {var implementors = {
"abyss":[["impl Drop for <a class=\"struct\" href=\"abyss/interrupt/struct.InterruptGuard.html\" title=\"struct abyss::interrupt::InterruptGuard\">InterruptGuard</a>"]],
"crossbeam_queue":[["impl&lt;T&gt; Drop for <a class=\"struct\" href=\"crossbeam_queue/struct.ArrayQueue.html\" title=\"struct crossbeam_queue::ArrayQueue\">ArrayQueue</a>&lt;T&gt;"],["impl&lt;T&gt; Drop for <a class=\"struct\" href=\"crossbeam_queue/struct.SegQueue.html\" title=\"struct crossbeam_queue::SegQueue\">SegQueue</a>&lt;T&gt;"]],
"crossbeam_utils":[["impl&lt;T&gt; Drop for <a class=\"struct\" href=\"crossbeam_utils/atomic/struct.AtomicCell.html\" title=\"struct crossbeam_utils::atomic::AtomicCell\">AtomicCell</a>&lt;T&gt;"]],
"hashbrown":[["impl&lt;'a, K, V, F, A&gt; Drop for <a class=\"struct\" href=\"hashbrown/hash_map/struct.DrainFilter.html\" title=\"struct hashbrown::hash_map::DrainFilter\">DrainFilter</a>&lt;'a, K, V, F, A&gt;<span class=\"where fmt-newline\">where\n    F: FnMut(&amp;K, &amp;mut V) -&gt; bool,\n    A: Allocator + Clone,</span>"],["impl&lt;'a, K, F, A: Allocator + Clone&gt; Drop for <a class=\"struct\" href=\"hashbrown/hash_set/struct.DrainFilter.html\" title=\"struct hashbrown::hash_set::DrainFilter\">DrainFilter</a>&lt;'a, K, F, A&gt;<span class=\"where fmt-newline\">where\n    F: FnMut(&amp;K) -&gt; bool,</span>"]],
"keos":[["impl Drop for <a class=\"struct\" href=\"keos/mm/struct.ContigPages.html\" title=\"struct keos::mm::ContigPages\">ContigPages</a>"],["impl&lt;T: Send + 'static&gt; Drop for <a class=\"struct\" href=\"keos/thread/channel/struct.Sender.html\" title=\"struct keos::thread::channel::Sender\">Sender</a>&lt;T&gt;"],["impl&lt;T: Send + 'static&gt; Drop for <a class=\"struct\" href=\"keos/thread/channel/struct.Receiver.html\" title=\"struct keos::thread::channel::Receiver\">Receiver</a>&lt;T&gt;"]],
"kev":[["impl&lt;S: <a class=\"trait\" href=\"kev/vm/trait.VmState.html\" title=\"trait kev::vm::VmState\">VmState</a> + 'static&gt; Drop for <a class=\"struct\" href=\"kev/vm/struct.Vm.html\" title=\"struct kev::vm::Vm\">Vm</a>&lt;S&gt;"]],
"once_cell":[["impl&lt;T&gt; Drop for <a class=\"struct\" href=\"once_cell/race/struct.OnceBox.html\" title=\"struct once_cell::race::OnceBox\">OnceBox</a>&lt;T&gt;"]],
"project1":[["impl Drop for <a class=\"struct\" href=\"project1/page_table/struct.TLBInvalidate.html\" title=\"struct project1::page_table::TLBInvalidate\">TLBInvalidate</a>"]],
"project4":[["impl&lt;'a&gt; Drop for <a class=\"struct\" href=\"project4/virtio/virt_queue/struct.VirtQueueFetcher.html\" title=\"struct project4::virtio::virt_queue::VirtQueueFetcher\">VirtQueueFetcher</a>&lt;'a&gt;"]],
"spin":[["impl&lt;'a, T: ?Sized&gt; Drop for <a class=\"struct\" href=\"spin/struct.MutexGuard.html\" title=\"struct spin::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;"],["impl&lt;'rwlock, T: ?Sized&gt; Drop for <a class=\"struct\" href=\"spin/struct.RwLockReadGuard.html\" title=\"struct spin::RwLockReadGuard\">RwLockReadGuard</a>&lt;'rwlock, T&gt;"],["impl&lt;'rwlock, T: ?Sized&gt; Drop for <a class=\"struct\" href=\"spin/struct.RwLockUpgradeableGuard.html\" title=\"struct spin::RwLockUpgradeableGuard\">RwLockUpgradeableGuard</a>&lt;'rwlock, T&gt;"],["impl&lt;'rwlock, T: ?Sized&gt; Drop for <a class=\"struct\" href=\"spin/struct.RwLockWriteGuard.html\" title=\"struct spin::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'rwlock, T&gt;"]],
"spin_lock":[["impl&lt;T: ?Sized&gt; Drop for <a class=\"struct\" href=\"spin_lock/smplock/struct.SpinLockGuard.html\" title=\"struct spin_lock::smplock::SpinLockGuard\">SpinLockGuard</a>&lt;'_, T&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()