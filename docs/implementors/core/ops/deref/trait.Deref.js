(function() {var implementors = {
"abyss":[["impl&lt;V:&nbsp;Send + Sync&gt; Deref for <a class=\"struct\" href=\"abyss/dev/pci/virtio/pci/struct.PciTransport.html\" title=\"struct abyss::dev::pci::virtio::pci::PciTransport\">PciTransport</a>&lt;V&gt;"],["impl&lt;T:&nbsp;?Sized&gt; Deref for <a class=\"struct\" href=\"abyss/spin_lock/struct.SpinLockGuard.html\" title=\"struct abyss::spin_lock::SpinLockGuard\">SpinLockGuard</a>&lt;'_, T&gt;"]],
"crossbeam_utils":[["impl&lt;T&gt; Deref for <a class=\"struct\" href=\"crossbeam_utils/struct.CachePadded.html\" title=\"struct crossbeam_utils::CachePadded\">CachePadded</a>&lt;T&gt;"]],
"gimli":[["impl&lt;'input, Endian&gt; Deref for <a class=\"struct\" href=\"gimli/read/struct.EndianSlice.html\" title=\"struct gimli::read::EndianSlice\">EndianSlice</a>&lt;'input, Endian&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: <a class=\"trait\" href=\"gimli/trait.Endianity.html\" title=\"trait gimli::Endianity\">Endianity</a>,</span>"],["impl&lt;Endian, T&gt; Deref for <a class=\"struct\" href=\"gimli/read/struct.EndianReader.html\" title=\"struct gimli::read::EndianReader\">EndianReader</a>&lt;Endian, T&gt;<span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Endian: <a class=\"trait\" href=\"gimli/trait.Endianity.html\" title=\"trait gimli::Endianity\">Endianity</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: <a class=\"trait\" href=\"gimli/trait.CloneStableDeref.html\" title=\"trait gimli::CloneStableDeref\">CloneStableDeref</a>&lt;Target = [u8]&gt; + Debug,</span>"]],
"kev":[["impl&lt;S:&nbsp;<a class=\"trait\" href=\"kev/vm/trait.VmState.html\" title=\"trait kev::vm::VmState\">VmState</a>&gt; Deref for <a class=\"struct\" href=\"kev/vm/struct.Vm.html\" title=\"struct kev::vm::Vm\">Vm</a>&lt;S&gt;"],["impl&lt;S:&nbsp;<a class=\"trait\" href=\"kev/vm/trait.VmState.html\" title=\"trait kev::vm::VmState\">VmState</a>&gt; Deref for <a class=\"struct\" href=\"kev/vm/struct.VmBuilder.html\" title=\"struct kev::vm::VmBuilder\">VmBuilder</a>&lt;S&gt;"]],
"once_cell":[["impl&lt;T, F:&nbsp;FnOnce() -&gt; T&gt; Deref for <a class=\"struct\" href=\"once_cell/unsync/struct.Lazy.html\" title=\"struct once_cell::unsync::Lazy\">Lazy</a>&lt;T, F&gt;"]],
"spin":[["impl&lt;'a, T:&nbsp;?Sized&gt; Deref for <a class=\"struct\" href=\"spin/struct.MutexGuard.html\" title=\"struct spin::MutexGuard\">MutexGuard</a>&lt;'a, T&gt;"],["impl&lt;'rwlock, T:&nbsp;?Sized&gt; Deref for <a class=\"struct\" href=\"spin/struct.RwLockReadGuard.html\" title=\"struct spin::RwLockReadGuard\">RwLockReadGuard</a>&lt;'rwlock, T&gt;"],["impl&lt;'rwlock, T:&nbsp;?Sized&gt; Deref for <a class=\"struct\" href=\"spin/struct.RwLockUpgradeableGuard.html\" title=\"struct spin::RwLockUpgradeableGuard\">RwLockUpgradeableGuard</a>&lt;'rwlock, T&gt;"],["impl&lt;'rwlock, T:&nbsp;?Sized&gt; Deref for <a class=\"struct\" href=\"spin/struct.RwLockWriteGuard.html\" title=\"struct spin::RwLockWriteGuard\">RwLockWriteGuard</a>&lt;'rwlock, T&gt;"]],
"spin_lock":[["impl&lt;T:&nbsp;?Sized&gt; Deref for <a class=\"struct\" href=\"spin_lock/smplock/struct.SpinLockGuard.html\" title=\"struct spin_lock::smplock::SpinLockGuard\">SpinLockGuard</a>&lt;'_, T&gt;"]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()